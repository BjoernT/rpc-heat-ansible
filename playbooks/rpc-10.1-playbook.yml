---
# This playbook installs Rackspace Private Cloud v10.1

- name: None
  hosts: all
  tags:
    - none
  tasks:
    - name: Ping Nodes
      ping:

- name: Setup
  hosts: all
  tags:
    - setup
    - install-rpc
  tasks:
    - name: Install Packages
      apt: name={{ item }} state=present
      with_items:
        - colordiff
        - fping

    - name: Add Nodes Hosts File Entries (Long)
      lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item].ansible_eth2.ipv4.address }} {{ heat_stack_prefix }}-{{ item }}' line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ heat_stack_prefix }}-{{ item }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Add Nodes Hosts File Entries (Short)
      lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item].ansible_eth2.ipv4.address }} {{ item }}' line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ item }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Add Nodes Hosts File Entries (Node)
      lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item].ansible_eth2.ipv4.address }} {{ "n%02d"|format(hostvars[item].node_id) }}' line='{{ hostvars[item].ansible_eth2.ipv4.address }} {{ "n%02d"|format(hostvars[item].node_id) }}' insertafter=EOF state=present
      with_items: groups.all

    - name: Check Connectivity
      command: fping {{ item }}
      changed_when: False
      with_items: groups.all

    - name: Create /etc/ansible/facts.d
      file: path=/etc/ansible/facts.d state=directory

    - name: Create Dummy Fact
      ini_file: dest=/etc/ansible/facts.d/dummy.fact section=dummy option=dummy value=dummy

    - name: Gather Facts
      setup:

    - name: Set Environment Variables and Force Color Prompt
      lineinfile: dest=/root/.bashrc regexp='{{ item.regexp }}' line='{{ item.line }}' insertafter=EOF state=present
      with_items:
        - { regexp: '^(#)?force_color_prompt',      line: 'force_color_prompt=yes' }
        - { regexp: '^export MY_HEAT_STACK_PREFIX', line: 'export MY_HEAT_STACK_PREFIX={{ heat_stack_prefix }}' }
        - { regexp: '^export MY_NODE_ID',           line: 'export MY_NODE_ID={{ node_id }}' }
        - { regexp: '^export MY_IP',                line: 'export MY_IP={{ hostvars[inventory_hostname].ansible_eth2.ipv4.address }}' }
        - { regexp: '^export MY_PRIVATE_IP',        line: 'export MY_PRIVATE_IP={{ hostvars[inventory_hostname].ansible_eth2.ipv4.address }}' }
        - { regexp: '^export MY_PUBLIC_IP',         line: 'export MY_PUBLIC_IP={{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}' }

    - name: Create Swap File
      command: dd if=/dev/zero of=/mnt/4GB.swap bs=1024 count=4194304 creates=/mnt/4GB.swap

    - name: Format Swap File
      command: mkswap /mnt/4GB.swap
      changed_when: false

    - name: Check Swap File
      command: swapon -s
      register: check_swap_file_result
      changed_when: false

    - name: Enable Swap File
      command: swapon /mnt/4GB.swap
      when: "'/mnt/4GB.swap' not in check_swap_file_result.stdout"

    - name: Add Swap To /etc/fstab
      lineinfile: dest=/etc/fstab regexp='/mnt/4GB.swap  none  swap  sw 0  0' line='/mnt/4GB.swap  none  swap  sw 0  0' insertafter=EOF

    - name: Set Swappiness
      sysctl: name=vm.swappiness value=90 state=present

    - name: Create Partition Table
      shell: |
        parted {{ item.device }} mktable {{ item.type }} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: infra
          device: /dev/xvdz
          type: msdos
        - group: logger
          device: /dev/xvdz
          type: msdos
        - group: compute
          device: /dev/xvdz
          type: msdos
        - group: block
          device: /dev/xvdz
          type: msdos
        - group: object
          device: /dev/xvdz
          type: msdos

    - name: Create Primary Partitions
      shell: |
        export PARTITION_START=`parted -a optimal {{ item.device }} unit B print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/B//'`
        export PARTITION_END=`awk "BEGIN { printf \"%u\", $PARTITION_START + {{ item.size }} }"`
        echo "====="
        echo $PARTITION_START
        echo $PARTITION_END
        echo "====="
        parted -a optimal {{ item.device }} unit B mkpart primary ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: infra
          device: /dev/xvdz
          size: 139586437120
        - group: logger
          device: /dev/xvdz
          size: 32212254720
        - group: compute
          device: /dev/xvdz
          size: 16106127360
        - group: block
          device: /dev/xvdz
          size: 21474836480
        - group: block
          device: /dev/xvdz
          size: 107374182400
        - group: object
          device: /dev/xvdz
          size: 16106127360

    - name: Create Extended Partitions (Extended Partition Will Consume All Free Space)
      shell: |
        export PARTITION_START=`parted -a optimal {{ item.device }} unit B print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/B//'`
        export PARTITION_END=`parted -a optimal {{ item.device }} unit B print free | awk '/Free Space/ { print $2 }' | tail -n 1 | sed 's/B//'`
        echo "====="
        echo $PARTITION_START
        echo $PARTITION_END
        echo "====="
        parted -a optimal {{ item.device }} unit B mkpart extended ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: object
          device: /dev/xvdz

    - name: Create Logical Partitions
      shell: |
        export PARTITION_START=`parted {{ item.device }} print free | awk '/Free Space/ { print $1 }' | tail -n 1 | sed 's/B//'`
        export PARTITION_END=`awk "BEGIN { printf \"%u\", $PARTITION_START + {{ item.size }} }"`
        echo "====="
        echo $PARTITION_START
        echo $PARTITION_END
        echo "====="
        parted -a optimal {{ item.device }} unit B mkpart logical ${PARTITION_START} ${PARTITION_END} && partprobe {{ item.device }}
      when: inventory_hostname in groups[ item.group ] and ansible_local.partitions is not defined
      with_items:
        - group: object
          device: /dev/xvdz
          size: 21474836480
        - group: object
          device: /dev/xvdz
          size: 21474836480
        - group: object
          device: /dev/xvdz
          size: 21474836480
        - group: object
          device: /dev/xvdz
          size: 21474836480
        - group: object
          device: /dev/xvdz
          size: 21474836480

    - name: Create Partitions Done Fact
      ini_file: dest=/etc/ansible/facts.d/partitions.fact section=state option=done value=true

- name: Install Compute
  hosts: all
  tags:
    - install-rpc
  tasks:
    - name: Check Connectivity
      command: fping {{ item }}
      changed_when: False
      with_items: groups.all

    - name: Genereate SSH Keypair
      command: ssh-keygen -f ~/.ssh/id_rsa -t rsa -q -N "" creates=/root/.ssh/id_rsa.pub
      when: inventory_hostname == groups.infra|first

    - name: Get SSH Public Key
      command: cat /root/.ssh/id_rsa.pub
      register: public_key_result
      changed_when: False
      when: inventory_hostname == groups.infra|first

    - name: Distribute SSH Public Key
      authorized_key: user=root key='{{ hostvars[ groups.infra|first ].public_key_result.stdout }}' state=present

    - name: Test SSH Connectivity
      command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ item }} hostname
      changed_when: False
      when: inventory_hostname == groups.infra|first
      with_items: groups.all

    - name: Update and Upgrade System
      apt: upgrade=safe update_cache=yes cache_valid_time=3600

    - name: Install Necessary Base Packages
      apt: pkg={{ item }} state=present update_cache=yes force=yes
      with_items:
        - aptitude
        - build-essential
        - git
        - python-dev
        - bridge-utils
        - debootstrap
        - ifenslave
        - lsof
        - lvm2
        - ntp
        - ntpdate
        - openssh-server
        - sudo
        - tcpdump
        - vlan

    - name: Create Physical Volumes
      command: pvcreate --metadatasize 2048 {{ item.device }}
      register: pvcreate_result
      failed_when: pvcreate_result.rc != 0 and pvcreate_result.rc != 5
      when: inventory_hostname in groups[ item.group ]
      changed_when: False
      with_items:
        - group: all
          device: /dev/xvdz1
        - group: block
          device: /dev/xvdz2

    - name: Create Logical Volume Groups
      lvg: vg={{ item.vg }} pvs={{ item.pvs }} state=present vg_options=''
      when: inventory_hostname in groups[ item.group ]
      with_items:
        - group: all
          vg: lxc
          pvs: /dev/xvdz1
        - group: block
          vg: cinder-volumes
          pvs: /dev/xvdz2

    - name: Create End-of-Line In /etc/ssh/sshd_config
      shell: |
        cat >> /etc/ssh/sshd_config <<EOF
        
        
        EOF
      when: ansible_local.sshd_config is not defined

    - name: Create End-of-Line In /etc/ssh/sshd_config Done Fact
      ini_file: dest=/etc/ansible/facts.d/sshd_config.fact section=state option=done value=true

    - name: Create /etc/network/interfaces.d/
      file: dest=/etc/network/interfaces.d/ state=directory

    - name: Source /etc/network/interfaces.d/*.cfg
      lineinfile: dest=/etc/network/interfaces line='source /etc/network/interfaces.d/*.cfg' state=present insertafter=EOF

    - name: Create /etc/network/interfaces.d/rpc.cfg
      template: src=templates/etc/network/interfaces.d/rpc-10.1.cfg.j2 dest=/etc/network/interfaces.d/rpc.cfg

    - name: Bring Up VXLANs
      command: ifup vxlan-{{ item }}
      register: ifup_vxlans_result
      changed_when: "ifup_vxlans_result.rc == 0 and ifup_vxlans_result.stderr != 'ifup: interface vxlan-{{ item }} already configured'"
      with_items:
        - mgmt
        - vxlan
        - vlan
        - storage

    - name: Check Connectivity
      command: fping 172.29.236.{{ hostvars[item].node_id }}
      changed_when: False
      with_items: groups.all

- name: Install Compute
  hosts: infra[0]
  tags:
    - install-rpc
  tasks:
    - name: Create /opt
      file: dest=/opt state=directory

    - name: Clone RPC Repo
      git: repo=https://github.com/stackforge/os-ansible-deployment.git dest=/opt/os-ansible-deployment version=10.1.3

    - name: Get Modern PIP
      command: curl -O http://mirror.rackspace.com/rackspaceprivatecloud/downloads/get-pip.py chdir=/opt creates=/opt/get-pip.py
      changed_when: False

    - name: Install Modern PIP
      command: python get-pip.py chdir=/opt
      changed_when: False

    - name: PIP Install Requirements
      pip: requirements=/opt/os-ansible-deployment/requirements.txt
      when: ansible_local.pip_install_requirements is not defined

    - name: PIP Install Requirements Done Fact
      ini_file: dest=/etc/ansible/facts.d/pip_install_requirements.fact section=state option=done value=true

    - name: Create /etc/rpc_deploy
      file: dest=/etc/rpc_deploy state=directory

    - name: Copy Default Configuration Files
      command: cp /opt/os-ansible-deployment/etc/rpc_deploy/{{ item }} /etc/rpc_deploy/{{ item }} creates=/etc/rpc_deploy/{{ item }}
      with_items:
        - rpc_environment.yml
        - rpc_user_config.yml
        - user_variables.yml

    - name: Update RPC User Config
      template: src=templates/etc/rpc_deploy/rpc_user_config-10.1.yml.j2 dest=/etc/rpc_deploy/rpc_user_config.yml

    - name: Update RPC User Variables
      shell: |
        sed -i -r 's|{{ item.search }}|{{ item.replace }}|g' /etc/rpc_deploy/user_variables.yml
      with_items:
        - { search: 'password:$',                                           replace: 'password: {{ heat_stack_password }}' }
        - { search: 'token:$',                                              replace: 'token: {{ heat_stack_password }}' }
        - { search: 'key:$',                                                replace: 'key: {{ heat_stack_password }}' }
        - { search: 'secret:$',                                             replace: 'secret: {{ heat_stack_password }}' }
        - { search: 'heat_auth_encryption_key: {{ heat_stack_password }}$', replace: 'heat_auth_encryption_key: {{ heat_stack_password }}12345678901234567890' }
        - { search: '# nova_virt_type: kvm',                                replace: 'nova_virt_type: qemu' }
      when: ansible_local.user_variables is not defined

    - name: Update /etc/rpc_deploy/user_variables.yml Done Fact
      ini_file: dest=/etc/ansible/facts.d/user_variables.fact section=state option=done value=true

    - name: Run 'Setup - Setup Common' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - setup/setup-common.yml

    - name: Run 'Setup - Build Containers' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - setup/build-containers.yml

    - name: Run 'Setup - Restart Containers' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - setup/restart-containers.yml

    - name: Run 'Setup - Containers Common' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - setup/containers-common.yml

    - name: Run 'Infrastructure - HAProxy Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/haproxy-install.yml

    - name: Run 'Infrastructure - Memcached Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/memcached-install.yml

    - name: Run 'Infrastructure - Galera Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/galera-install.yml

    - name: Run 'Infrastructure - Rabbit Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/rabbit-install.yml

    - name: Run 'Infrastructure - Rsyslog Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/rsyslog-install.yml

    - name: Run 'Infrastructure - Elasticsearch Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/elasticsearch-install.yml

    - name: Run 'Infrastructure - Logstash Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/logstash-install.yml

    - name: Run 'Infrastructure - Kibana Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/kibana-install.yml

    - name: Run 'Infrastructure - Elasticsearch CLI Install' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/es2unix-install.yml

    - name: Run 'Infrastructure - Rsyslog Config' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/rsyslog-config.yml

    - name: Run 'OpenStack - Keystone All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/keystone-all.yml

    - name: Run 'OpenStack - Glance All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/glance-all.yml

    - name: Run 'OpenStack - Heat All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/heat-all.yml

    - name: Run 'OpenStack - Nova All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/nova-all.yml

    - name: Run 'OpenStack - Neutron All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/neutron-all.yml

    - name: Run 'OpenStack - Cinder All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/cinder-all.yml

    - name: Run 'OpenStack - Horizon All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/horizon-all.yml

    - name: Run 'OpenStack - Utility All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/utility-all.yml

    - name: Run 'OpenStack - RPC Support All' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - openstack/rpc-support-all.yml

    - name: Run 'Infrastructure - Rsyslog Config' Playbook
      command: ansible-playbook -e @/etc/rpc_deploy/user_variables.yml playbooks/{{ item }} chdir=/opt/os-ansible-deployment/rpc_deployment/
      register: playbook_result
      until: playbook_result.rc == 0
      retries: 5
      delay: 10
      with_items:
        - infrastructure/rsyslog-config.yml
