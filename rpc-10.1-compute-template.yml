heat_template_version: 2013-05-23

description: Deploy A Rackspace Private Cloud v10.1 Compute Environment

parameters:
  ansible_tag:
    type: string
    label: Ansible Tags
    default: 'none'

resources:
  password:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-rpc-keypair"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      save_private_key: True

  network:
    type: Rackspace::Cloud::Network
    properties:
      cidr: 192.168.2.0/24
      label:
        str_replace:
          template: "%heat_stack_prefix%-rpc-network"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }

  swift_signal_handle_infra1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_logger1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_compute1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_infra1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_infra1 }
      count: 1
      timeout: 10800

  swift_signal_logger1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_logger1 }
      count: 1
      timeout: 7200

  swift_signal_compute1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_compute1 }
      count: 1
      timeout: 7200

  cloud_config_infra1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - python-pip
          - python-apt
          - python-dev
        write_files:
          - path: /opt/cloud-training/id_rsa
            permissions: "0600"
            content: { get_attr: [ keypair, private_key ] }
          - path: /opt/cloud-training/inventory
            permissions: "0600"
            content:
              str_replace:
                template: |
                  [all:vars]
                  ansible_ssh_user=root
                  ansible_ssh_private_key_file=/opt/cloud-training/id_rsa
                  heat_stack_prefix=%heat_stack_prefix%
                  heat_stack_id=%heat_stack_id%
                  heat_stack_name=%heat_stack_name%
                  heat_stack_password=%heat_stack_password%
                  
                  [all]
                  infra1      ansible_connection=local    node_id=1
                  logger1     ansible_ssh_host=%server_logger1_ip%    node_id=2
                  compute1    ansible_ssh_host=%server_compute1_ip%    node_id=3
                  
                  [infra]
                  infra1
                  
                  [logger]
                  logger1
                  
                  [compute]
                  compute1
                  
                  [block]
                  
                  [object]
                params:
                  "%heat_stack_prefix%":   { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                  "%heat_stack_id%":       { get_param: "OS::stack_id" }
                  "%heat_stack_name%":     { get_param: "OS::stack_name" }
                  "%heat_stack_password%": { get_attr: [ password, value ] }
                  "%server_logger1_ip%":   { get_attr: [ server_logger1, accessIPv4 ] }
                  "%server_compute1_ip%":  { get_attr: [ server_compute1, accessIPv4 ] }
          - path: /opt/cloud-training/runcmd-bash
            permissions: "0700"
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  export HOME="/root"
                  set -e
                  set -x
                  function exit_failure {
                    %swift_signal_notify% --data-binary '{"status": "FAILURE", "reason": "'"$@"'"}'
                    exit 1
                  }
                  function exit_success {
                    %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
                  }
                  /usr/bin/pip install --upgrade pip || exit_failure "PIP Upgrade PIP Failure"
                  /usr/local/bin/pip install pip==1.5.6 || exit_failure "PIP Install PIP Failure"
                  /usr/local/bin/pip install ansible==1.6.10 || exit_failure "PIP Install Ansible Failure"
                  cd /opt/cloud-training
                  # BEGIN - Terrible Chicken Egg Hack
                  export MY_PUBLIC_IP=`curl -s http://ipv4.icanhazip.com/`
                  sed -i "s/ansible_connection=local/ansible_ssh_host=$MY_PUBLIC_IP/" inventory
                  # END - Terrible Chicken Egg Hack
                  git clone https://github.com/cloud-training/rpc-heat-ansible.git || exit_failure "Git Clone Failure"
                  cd /opt/cloud-training/rpc-heat-ansible/playbooks
                  ansible-playbook rpc-10.1-playbook.yml -v --tags %ansible_tag% || exit_failure "Ansible Playbook Run Failure"
                  exit_success
                params:
                  "%swift_signal_notify%": { get_attr: [ swift_signal_handle_infra1, curl_cli ] }
                  "%ansible_tag%": { get_param: "ansible_tag"}
        runcmd:
          - /opt/cloud-training/runcmd-bash >> /opt/cloud-training/runcmd-bash.log 2>> /opt/cloud-training/runcmd-bash.err

  cloud_config_logger1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_logger1, curl_cli ] }

  cloud_config_compute1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_compute1, curl_cli ] }

  server_infra1:
    type: OS::Nova::Server
    depends_on: [ swift_signal_logger1, swift_signal_compute1 ]
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 8GB Standard Instance
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: MANUAL
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_infra1 }

  server_logger1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-logger1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 4GB Standard Instance
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: MANUAL
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_logger1 }

  server_compute1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-compute1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 4GB Standard Instance
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: MANUAL
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_compute1 }

outputs:
  password:
    description: Password
    value: { get_attr: [ password, value ] }
  private_key:
    description: Private Key
    value: { get_attr: [ keypair, private_key ] }
  server_infra1_ip:
    description: Infra1 IP
    value: { get_attr: [ server_infra1, accessIPv4 ] }
